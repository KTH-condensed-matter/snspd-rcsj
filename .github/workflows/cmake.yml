name: CMake

on:
  push:
    tags:
      - 'v*'

env:
  CC: /usr/bin/gcc-9
  CXX: /usr/bin/g++-9

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    # Install pip3 for x64
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        architecture: 'x64'

    - name: Cache conan
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.conan
        key: ${{ runner.os }}-build-conan-${{ hashFiles('conanfile.txt') }}
        restore-keys: |
          ${{ runner.os }}-build-conan-

    - name: Install Conan
      # Install conan
      run: pip install conan

    - name: Build
      # Build code
      run: ./build.sh

    - name: Create zip
      run: zip -r release.zip bin

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release.zip
        asset_name: release.zip
        asset_content_type: application/zip
